# 동아리 개수
# 현수가 다니는 학교에는 동아리가 많이 있습니다.
# 현수가 다니는 학교의 학생은 1번부터 n번까지 번호가 부여된 n명의 학생들로 되어 있습니다.
# 만약 1번 학생과 2번 학생이 같은 동아리 이면 [1, 2] 순서쌍으로 입력되며, 
# [2, 3]은 2번 학생과 3번 학생이 같은 동아리입니다. 
# 즉 [1, 2], [2, 3]은 1, 2, 3번 학생이 같은 동아리를 의미합니다. 
# 모든 학생은 동아리를 가지고 있습니다.
# 매개변수 n에 현수가 다니는 학교의 총 학생수가 주어지고, 
# 매개변수 edges에 학생들의 동아리 정보가 주어지면 
# 현수가 다니는 학교의 동아리의 개수를 구하는 프로그램을 작성하세요.

# 제한사항:
# • 3 <= n <= 50
def DFS(v, graph, ch, n):
    ch[v] = 1

    for nv in graph[v]:
        if ch[nv] == 0:
            DFS(nv, graph, ch, n)

def solutions(n, edge):
    answer = 0
    ch = [0] * (n+1)
    graph = [[] for _ in range(n+1)]
    for [a,b] in edge:
        graph[a].append(b)
        graph[b].append(a)

    for i in range(1,n+1):
        if ch[i] == 0:
            answer += 1
            DFS(i, graph, ch, n)
            
    return answer

print(solutions(10, [[1, 2], [2, 3], [1, 4], [1, 5], [6, 8], [7, 8], [9, 10]]))
print(solutions(20, [[1, 2], [2, 5], [5, 7], [9, 7], [5, 13], [15, 13], [3,
4], [4, 6], [6, 8], [8, 10], [11, 12], [14, 16], [16,
17], [17, 18], [19, 20]]))
print(solutions(7, [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]))
print(solutions(30, [[5, 6], [6, 7]]))

# 위험 지역
# n*n 이차원 배열에 특정 지역의 지뢰정보가 지도로 주어집니다.
# 만약 아래와 같이 5*5의 지도에 지뢰정보가 주어지면
# 위에 지도에서 1은 지뢰가 매설된 지역이고, 0은 빈땅입니다.
# 위에 지도에서 지뢰가 매설된 격자와 상하좌우 대각선으로 
# 인접한 8개의 빈땅 격자를 위험지역입니다. 
# 위에 지도에서 위험지역은 총 14개입니다.
# 매개변수 board에 특정지역의 지뢰정보가 담겨진 지도가 주어지면 이 지역에 위험지역이 총
# 몇 개 있는지 반환하는 프로그램을 작성하세요.

# 제한사항:
# • 3 <= n <= 30

def solutions(board):
    #(-1,0), (-1,1), (0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1)
    dx = [-1, -1, 0, 1, 1, 1, 0, -1]
    dy = [0, 1, 1, 1, 0, -1, -1, -1]
    n = len(board)
    answer = 0

    for x in range(n):
        for y in range(n):
            if board[x][y] == 1:
                for k in range(8):
                    nx = x + dx[k]
                    ny = y + dy[k]
                    # 격자에서 안 나가도록 설정 및 빈땅이었을때만 anser 추가
                    if nx >= 0 and nx < n and ny >= 0 and ny < n and board[nx][ny] == 0:
                        answer += 1
                        # 이미 카운트 된 땅 구별
                        # 조건이 참일때만 카운트하도록 해서 두번 세도록 안함
                        board[nx][ny] = 2
    return answer

print(solutions([[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0,
0, 0], [0, 0, 0, 0, 0]]))